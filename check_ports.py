#!/usr/bin/env python3
"""
Script ki·ªÉm tra port conflicts tr∆∞·ªõc khi ch·∫°y Docker stack
"""

import socket
import sys

# C√°c port m√† stack s·∫Ω s·ª≠ d·ª•ng
REQUIRED_PORTS = {
    8080: "Nginx (reverse proxy)",
    8001: "FastAPI (direct access)",
    27019: "MongoDB (external access)",
    6381: "Redis (external access)"
}

def check_port_available(port):
    """Ki·ªÉm tra xem port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', port))
            return result != 0  # Port available if connection fails
    except Exception:
        return True  # Assume available if can't check

def main():
    print("üîç Ki·ªÉm tra port conflicts cho FX-API Docker stack...")
    print("=" * 60)
    
    conflicts = []
    
    for port, service in REQUIRED_PORTS.items():
        if check_port_available(port):
            print(f"‚úÖ Port {port:5d} - {service:<30} - Available")
        else:
            print(f"‚ùå Port {port:5d} - {service:<30} - OCCUPIED")
            conflicts.append(port)
    
    print("=" * 60)
    
    if conflicts:
        print(f"‚ö†Ô∏è  C·∫¢NH B√ÅO: {len(conflicts)} port(s) ƒëang b·ªã s·ª≠ d·ª•ng!")
        print("\nC√°c port b·ªã xung ƒë·ªôt:")
        for port in conflicts:
            print(f"  - Port {port}: {REQUIRED_PORTS[port]}")
        
        print("\nüí° Gi·∫£i ph√°p:")
        print("1. D·ª´ng c√°c ·ª©ng d·ª•ng ƒëang s·ª≠ d·ª•ng port tr√™n")
        print("2. Ho·∫∑c thay ƒë·ªïi port trong docker-compose.yml")
        print("3. S·ª≠ d·ª•ng l·ªánh sau ƒë·ªÉ xem process ƒëang d√πng port:")
        for port in conflicts:
            print(f"   netstat -ano | findstr :{port}")
        
        sys.exit(1)
    else:
        print("üéâ T·∫•t c·∫£ port ƒë·ªÅu available! C√≥ th·ªÉ ch·∫°y Docker stack.")
        print("\nüöÄ ƒê·ªÉ ch·∫°y stack:")
        print("   docker-compose up -d --build")
        print("\nüß™ ƒê·ªÉ test stack:")
        print("   python test_stack.py")

if __name__ == "__main__":
    main()
