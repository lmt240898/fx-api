# Risk Manager Service - Refactored from final_risk_manager.py
from pathlib import Path
from functools import wraps
from datetime import datetime
import requests, time, json, os, sys, random
from typing import Dict, Any, Optional, List, Tuple
from dotenv import load_dotenv
load_dotenv()
sys.path.append(str(Path(__file__).parent.parent))
from app.utils.logger import Logger
from app.utils.common import *
from app.utils.response_logger import response_logger
import json
import math
from app.utils.common import map_signal_to_action

# Order Type Constants (mirrors MT5 values for interoperability)
ORDER_TYPE_BUY = 0
ORDER_TYPE_SELL = 1
ORDER_TYPE_BUY_LIMIT = 2
ORDER_TYPE_SELL_LIMIT = 3
ORDER_TYPE_BUY_STOP = 4
ORDER_TYPE_SELL_STOP = 5

class RiskManagerService:
    """
    Risk Manager Service - Handles comprehensive risk management for trading signals.
    
    This service provides risk analysis, lot size calculation, and portfolio management
    for trading operations. Refactored from final_risk_manager.py for better maintainability.
    """
    
    def __init__(self, logger: Optional[Logger] = None):
        """
        Initialize RiskManagerService.
        
        Args:
            logger: Optional logger instance. If not provided, creates a default one.
        """
        self.logger = logger or Logger("risk_manager_service")
    
    def analyze_risk(self, params: dict) -> dict:
        """
        Main entry point for risk analysis - equivalent to final_risk_manager().
        
        Args:
            params (dict): Object containing all necessary parameters:
                - proposed_signal_json: Proposed trading signal
                - account_info_json: Account information
                - symbol: Symbol information
                - symbol_info: Detailed symbol information
                - correlation_groups_json: Correlation groups
                - balance_config: Risk configuration by balance
                - account_type_details: Account type details
                - portfolio_exposure_json: Current portfolio information
        
        Returns:
            dict: Risk analysis result
        """
        # Use the override logger if provided, otherwise use instance logger
        logger = params.get('logger_override') or self.logger
        
        logger.info("=== B·∫ÆT ƒê·∫¶U QU√Å TR√åNH QU·∫¢N L√ù R·ª¶I RO ===")
        
        # Create a shallow copy for logging to avoid modifying the original dict
        params_to_log = params.copy()
        # Remove non-serializable objects before logging
        params_to_log.pop('mt5_services', None)
        params_to_log.pop('logger_override', None)
        logger.info(f"=== PARAMS: {json.dumps(params_to_log, indent=2)} ===")
        
        # Call enhanced risk manager to process risk management logic
        result = self._analyze_risk_enhanced(params, logger)
        
        logger.info(f"=== K·∫æT TH√öC QU√Å TR√åNH QU·∫¢N L√ù R·ª¶I RO - STATUS: {result.get('status', 'UNKNOWN')} ===")
        
        # Log response
        try:
            symbol = params.get('symbol', {}).get('origin_name', 'UNKNOWN')
            response_logger.log_risk_manager_response(
                symbol=symbol,
                response_data=result,
                request_data=params_to_log
            )
        except Exception as log_error:
            logger.warning(f"Failed to log risk manager response: {log_error}")
        
        # Return result directly (no need to call AI API)
        return result

    def _analyze_risk_enhanced(self, params: dict, logger) -> dict:
        """
        Main coordinator function to evaluate a trading signal based on complex risk management rules.
        Equivalent to risk_manager_enhanced().

        Args:
            params (dict): Dictionary containing all necessary data and configuration.
            logger: Initialized logger instance.

        Returns:
            dict: Dictionary containing final decision and command parameters.
        """
        try:
            logger.info("[üîç B∆Ø·ªöC A: CHU·∫®N B·ªä V√Ä X√ÅC TH·ª∞C D·ªÆ LI·ªÜU]")
            # Extract and parse input data.
            # If there are errors at this step (e.g., invalid JSON, missing important fields),
            # log the error and return SKIP status.
            
            # Data from Proposed Signal
            proposed_signal = params.get('proposed_signal_json')
            symbol = proposed_signal.get('symbol', 'UNKNOWN')
            logger.info(f"üìä Symbol ƒëang x·ª≠ l√Ω: {symbol}")

            # Account data
            account_info = params.get('account_info_json', {})
            equity = float(account_info.get('equity', 0))
            balance = float(account_info.get('balance', 0))
            logger.info(f"üí∞ Balance: ${balance:.2f}, Equity: ${equity:.2f}")

            # Symbol data
            symbol_info = params.get('symbol_info', {})
            volume_min = float(symbol_info.get('volume_min', 0.01))
            volume_max = float(symbol_info.get('volume_max', 200.0))
            volume_step = float(symbol_info.get('volume_step', 0.01))
            logger.info(f"üìà Symbol config - Min: {volume_min}, Max: {volume_max}, Step: {volume_step}")

            # Portfolio data
            portfolio_exposure = params.get('portfolio_exposure_json', {}) # This is dict, not JSON string

            # Risk configuration from balance_config
            balance_config = params.get('balance_config', {})
            vRisk = float(balance_config.get('max_risk', 2.0))
            vTotalRiskCap = float(balance_config.get('total_max_risk', 6.0))
            max_positions = int(balance_config.get('max_position', 5))
            correlation_groups = params.get('correlation_groups_json', {})
            logger.info(f"‚öôÔ∏è Risk config - Max Risk: {vRisk}%, Total Risk Cap: {vTotalRiskCap}%, Max Positions: {max_positions}")

            logger.info("[üöÄ B∆Ø·ªöC B: TH·ª∞C THI WORKFLOW QU·∫¢N L√ù R·ª¶I RO]")

            # -- STEP 1: PRE-FLIGHT PORTFOLIO CHECK (GO/NO-GO) --
            logger.info("[üîç STEP 1: KI·ªÇM TRA PRE-FLIGHT PORTFOLIO]")
            pre_flight_status, pre_flight_reason, pre_flight_data = self._perform_pre_flight_checks(
                symbol=symbol,
                proposed_signal=proposed_signal,
                portfolio_exposure=portfolio_exposure,
                max_positions=max_positions,
                equity=equity,
                vTotalRiskCap=vTotalRiskCap,
                symbol_info=symbol_info,
                vRisk=vRisk,
                logger=logger
            )

            logger.info(f"üìã K·∫øt qu·∫£ pre-flight check: {pre_flight_status} - {pre_flight_reason}")
            
            if pre_flight_status != "CONTINUE":
                logger.warning(f"‚ùå D·ª´ng x·ª≠ l√Ω do pre-flight check: {pre_flight_status}")
                return self._build_final_response(status=pre_flight_status, symbol=symbol, proposed_signal=proposed_signal, reason=pre_flight_reason)

            # -- STEP 2 & 3: T√çNH TO√ÅN LOT SIZE --
            logger.info("[üßÆ STEP 2 & 3: T√çNH TO√ÅN LOT SIZE]")
            # This step will calculate lot size based on risk, capital and adjustments.
            # It will return adjusted lot size or a status (e.g., HOLD) if there are issues.
            lot_size_result = self._calculate_final_lot_size(
                proposed_signal=proposed_signal,
                account_info=account_info,
                symbol_info=symbol_info,
                portfolio_exposure=portfolio_exposure,
                correlation_groups=correlation_groups,
                vRisk=vRisk,
                params=params, # Pass params in
                logger=logger
            )

            final_lot_size = lot_size_result.get('final_lot_size')
            correlated_symbols_found = lot_size_result.get('correlated_symbols', []) # Get correlated symbols list
            logger.info(f"üìä K·∫øt qu·∫£ t√≠nh lot size: {final_lot_size}")
            
            if lot_size_result.get('status') == "HOLD":
                logger.warning("‚ùå Lot size qu√° nh·ªè, tr·∫£ v·ªÅ HOLD")
                return self._build_final_response(status="HOLD", symbol=symbol, proposed_signal=proposed_signal, reason="Lot size too small")

            # -- STEP 4: FINAL VALIDATION AND PROFIT/LOSS CALCULATION --
            logger.info("[‚úÖ STEP 4: VALIDATION CU·ªêI C√ôNG V√Ä T√çNH TO√ÅN L·ª¢I NHU·∫¨N/THUA L·ªñ]")
            
            # 4g. Adjust Risk-to-Reward Ratio (New logic: R:R > 1.5 then adjust)
            logger.info("üìä ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá Risk-to-Reward")
            adjusted_take_profit = self._validate_and_adjust_rr_ratio(
                entry_price=float(proposed_signal.get('entry_price_proposed')),
                stop_loss=float(proposed_signal.get('stop_loss_proposed')),
                take_profit=float(proposed_signal.get('take_profit_proposed')),
                signal_type=proposed_signal.get('signal_type'),
                logger=logger
            )
            logger.info(f"üéØ Take Profit sau ƒëi·ªÅu ch·ªânh: {adjusted_take_profit}")
            
            # 4f. Recalculate Expected Profit/Loss with final lot size
            logger.info("üí∞ T√≠nh to√°n l·ª£i nhu·∫≠n/thua l·ªó d·ª± ki·∫øn")
            expected_loss_per_lot = self._calculate_expected_loss_per_lot(
                entry_price=float(proposed_signal.get('entry_price_proposed')),
                stop_loss=float(proposed_signal.get('stop_loss_proposed')),
                symbol_info=symbol_info,
                logger=logger
            )
            
            estimate_loss = -abs(final_lot_size * expected_loss_per_lot)
            logger.info(f"üìâ Thua l·ªó d·ª± ki·∫øn: ${estimate_loss:.2f}")
            
            # Calculate TP distance from entry
            sl_distance = abs(float(proposed_signal.get('entry_price_proposed')) - float(proposed_signal.get('stop_loss_proposed')))
            tp_distance = abs(adjusted_take_profit - float(proposed_signal.get('entry_price_proposed')))
            
            # Profit = (TP distance / SL distance) * Loss
            if sl_distance > 0:
                estimate_profit = abs((tp_distance / sl_distance) * estimate_loss)
            else:
                estimate_profit = 0
            
            logger.info(f"üìà L·ª£i nhu·∫≠n d·ª± ki·∫øn: ${estimate_profit:.2f}")
            
            # Calculate Risk-Reward before and after TP adjustment
            try:
                entry_price_val = float(proposed_signal.get('entry_price_proposed'))
                stop_loss_val = float(proposed_signal.get('stop_loss_proposed'))
                take_profit_original = float(proposed_signal.get('take_profit_proposed'))
                sl_dist_val = abs(entry_price_val - stop_loss_val)
                if sl_dist_val > 0:
                    risk_reward_before = abs(entry_price_val - take_profit_original) / sl_dist_val
                    risk_reward_after = abs(entry_price_val - adjusted_take_profit) / sl_dist_val
                else:
                    risk_reward_before = None
                    risk_reward_after = None
            except Exception:
                risk_reward_before = None
                risk_reward_after = None

            # ===== STEP C: BUILD FINAL RESULT =====
            logger.info("[üéØ B∆Ø·ªöC C: X√ÇY D·ª∞NG K·∫æT QU·∫¢ TR·∫¢ V·ªÄ]")
            logger.info(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω - STATUS: CONTINUE, Lot Size: {final_lot_size}")

            return self._build_final_response(
                status="CONTINUE",
                symbol=symbol,
                proposed_signal=proposed_signal,
                lot_size=final_lot_size,
                take_profit=adjusted_take_profit,
                estimate_profit=estimate_profit,
                estimate_loss=estimate_loss,
                risk_reward_before=risk_reward_before,
                risk_reward_after=risk_reward_after,
                correlated_symbols=correlated_symbols_found, # Pass to response
                tickets_to_delete=pre_flight_data.get('tickets_to_delete') # Add ticket deletion list
            )

        except Exception as e:
            # If any unexpected error occurs, system returns SKIP
            # to not stop the entire process. Can log error `e` for debugging.
            logger.error(f"‚ùå L·ªñI KH√îNG L∆Ø·ªúNG TR∆Ø·ªöC: {str(e)}")
            return self._build_final_response(
                status="SKIP", 
                symbol=params.get('symbol', {}).get('origin_name', 'UNKNOWN'), 
                # Try to get technical reasoning if possible
                proposed_signal=params.get('proposed_signal_json', {}),
                reason=f"Unexpected error: {str(e)}"
            )

    def _perform_pre_flight_checks(self, symbol, proposed_signal, portfolio_exposure, max_positions, equity, vTotalRiskCap, symbol_info, vRisk, logger):
        """
        Perform all GO/NO-GO checks in STEP 1 of the prompt.
        
        Returns:
            tuple: (status, reason, data)
        """
        try:
            logger.info("üîç STEP 1a: KI·ªÇM TRA GI·ªöI H·∫†N V·ªä TH·∫æ ACTIVE")
            # STEP 1a: Active Position Limit Check
            active_positions = portfolio_exposure.get('active_positions', [])
            logger.info(f"   - V·ªã th·∫ø active hi·ªán t·∫°i: {len(active_positions)} (Gi·ªõi h·∫°n: {max_positions})")
            if len(active_positions) >= max_positions:
                logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. ƒê√£ ƒë·∫°t gi·ªõi h·∫°n v·ªã th·∫ø t·ªëi ƒëa.")
                return ("STOP_TRADE", "Max position limit reached", {})
            logger.info("   -> ‚úÖ K·∫æT QU·∫¢: Pass.")
            
            logger.info("üîç STEP 1b: KI·ªÇM TRA L·ªÜNH ACTIVE C√ôNG SYMBOL")
            # STEP 1b: Same Symbol Active Trade Check
            is_conflicting_active_trade = False
            for position in active_positions:
                if position.get('symbol') == symbol:
                    logger.info(f"   - T√¨m th·∫•y l·ªánh active c√πng symbol: {symbol}")
                    if position.get('profit', 0) < 0:
                        logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. L·ªánh active ƒëang thua l·ªó: ${position.get('profit', 0):.2f}")
                        return ("SKIP", "An active trade on the same symbol is losing", {})
                    elif position.get('profit', 0) >= 0:
                        # Check if opposite direction
                        position_type = position.get('type', '')
                        signal_type = proposed_signal.get('signal_type', '')
                        logger.info(f"   - Ki·ªÉm tra h∆∞·ªõng giao d·ªãch - Position: {position_type}, Signal: {signal_type}")
                        if position_type != signal_type:
                            logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. C·∫•m giao d·ªãch ng∆∞·ª£c h∆∞·ªõng tr√™n symbol ƒëang l√£i.")
                            return ("SKIP", "Opposite direction trade on a profitable symbol is forbidden", {})
            if not is_conflicting_active_trade:
                logger.info("   -> ‚úÖ K·∫æT QU·∫¢: Pass.")

            logger.info("üîç STEP 1c: KI·ªÇM TRA XUNG ƒê·ªòT L·ªÜNH PENDING (LOGIC M·ªöI: THAY TH·∫æ)")
            # STEP 1c: Same Symbol Pending Order Conflict Check
            pending_orders_to_delete = []
            if proposed_signal.get('order_type_proposed') in ['LIMIT', 'STOP']:
                pending_orders = portfolio_exposure.get('pending_orders', [])
                logger.info(f"   - T√≠n hi·ªáu m·ªõi l√† PENDING. Ki·ªÉm tra {len(pending_orders)} l·ªánh ch·ªù hi·ªán c√≥.")
                for order in pending_orders:
                    if order.get('symbol') == symbol:
                        # According to option B: Delete all pending orders of the same symbol, regardless of direction.
                        logger.warning(f"   -> K·∫æT QU·∫¢: T√¨m th·∫•y l·ªánh ch·ªù ticket: {order.get('ticket')} cho {symbol}. S·∫Ω ƒë∆∞·ª£c thay th·∫ø.")
                        pending_orders_to_delete.append(order.get('ticket'))
                
                if pending_orders_to_delete:
                    logger.info(f"   -> S·∫Ω ƒë·ªÅ xu·∫•t x√≥a {len(pending_orders_to_delete)} l·ªánh ch·ªù c≈©.")
                    return ("CONTINUE", "Pending orders identified for replacement", {'tickets_to_delete': pending_orders_to_delete})

            logger.info("   -> ‚úÖ K·∫æT QU·∫¢: Pass.")
            
            logger.info("üîç STEP 1d: KI·ªÇM TRA T·ªîNG R·ª¶I RO PORTFOLIO")
            # STEP 1d: Total Unified Portfolio Risk Check
            total_potential_loss_from_portfolio_usd = portfolio_exposure.get('summary', {}).get('total_potential_loss_from_portfolio_usd', 0.0)
            
            # Calculate potential loss for new signal (using vRisk)
            risk_in_usd_new = equity * (vRisk / 100)
            
            total_potential_risk_usd = total_potential_loss_from_portfolio_usd + risk_in_usd_new
            total_risk_percent = (total_potential_risk_usd / equity) * 100
            
            logger.info(f"   - R·ªßi ro hi·ªán t·∫°i: ${total_potential_loss_from_portfolio_usd:.2f}")
            logger.info(f"   - R·ªßi ro m·ªõi (d·ª± ki·∫øn): ${risk_in_usd_new:.2f}")
            logger.info(f"   - T·ªïng r·ªßi ro (d·ª± ki·∫øn): ${total_potential_risk_usd:.2f} ({total_risk_percent:.2f}%)")
            logger.info(f"   - Gi·ªõi h·∫°n r·ªßi ro: {vTotalRiskCap}%")
            
            if total_risk_percent > vTotalRiskCap:
                logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. T·ªïng r·ªßi ro v∆∞·ª£t qu√° gi·ªõi h·∫°n: {total_risk_percent:.2f}% > {vTotalRiskCap}%")
                return ("STOP_TRADE", "Total portfolio risk exceeds cap", {})
            logger.info("   -> ‚úÖ K·∫æT QU·∫¢: Pass.")
            
            logger.info("‚úÖ T·∫•t c·∫£ ki·ªÉm tra pre-flight ƒë√£ pass")
            return ("CONTINUE", "All pre-flight checks passed", {})
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong pre-flight checks: {str(e)}")
            return ("SKIP", f"Error in pre-flight checks: {str(e)}", {})

    def _calculate_final_lot_size(self, proposed_signal, account_info, symbol_info, portfolio_exposure, correlation_groups, vRisk, params, logger):
        """
        Perform entire STEP 3 of the prompt, calculate lot size from basic to final.
        
        Returns:
            dict: {'final_lot_size': float} or {'status': 'HOLD'}
        """
        try:
            logger.info("üßÆ STEP 3a: X√ÅC ƒê·ªäNH R·ª¶I RO C∆† B·∫¢N")
            # STEP 3a: Determine Base Risk %
            estimate_win_probability = proposed_signal.get('estimate_win_probability', 50)
            logger.info(f"üìä X√°c su·∫•t th·∫Øng: {estimate_win_probability}%")
            
            if estimate_win_probability > 75:
                calculated_risk_percent = 1.5
            elif estimate_win_probability >= 65:
                calculated_risk_percent = 1.2
            elif estimate_win_probability >= 55:
                calculated_risk_percent = 0.8
            else:
                calculated_risk_percent = 0.5
            
            final_risk_percent = min(calculated_risk_percent, vRisk)
            logger.info(f"üìä R·ªßi ro c∆° b·∫£n: {calculated_risk_percent}%, R·ªßi ro cu·ªëi c√πng (sau khi so s√°nh v·ªõi vRisk): {final_risk_percent}%")
            
            logger.info("üßÆ STEP 3b: T√çNH TO√ÅN LOT SIZE BAN ƒê·∫¶U")
            # STEP 3b: Calculate Initial Lot Size
            equity = float(account_info.get('equity'))
            risk_in_usd = equity * (final_risk_percent / 100)
            logger.info(f"üí∞ R·ªßi ro t√≠nh b·∫±ng USD: ${risk_in_usd:.2f}")
            
            expected_loss_per_lot = self._calculate_expected_loss_per_lot(
                entry_price=float(proposed_signal.get('entry_price_proposed')),
                stop_loss=float(proposed_signal.get('stop_loss_proposed')),
                symbol_info=symbol_info,
                logger=logger
            )
            
            logger.info(f"üìâ Thua l·ªó d·ª± ki·∫øn cho 1 lot: ${expected_loss_per_lot:.2f}")
            
            if expected_loss_per_lot <= 0:
                logger.warning("‚ùå Thua l·ªó d·ª± ki·∫øn <= 0, tr·∫£ v·ªÅ HOLD")
                return {'status': 'HOLD'}
            
            base_lot_size = risk_in_usd / expected_loss_per_lot
            logger.info(f"üìä Lot size ban ƒë·∫ßu: {base_lot_size:.4f}")
            
            logger.info("üßÆ STEP 3c: √ÅP D·ª§NG ƒêI·ªÄU CH·ªàNH PORTFOLIO")
            adjusted_lot = base_lot_size
            
            # Drawdown Control - Loss control
            logger.info("   - ** Drawdown Control **")
            profit = float(account_info.get('profit', 0))
            balance = float(account_info.get('balance', 0))
            drawdown_threshold = -(0.04 * balance)
            logger.info(f"     - Profit hi·ªán t·∫°i: ${profit:.2f}, Ng∆∞·ª°ng s·ª•t gi·∫£m (4%): ${drawdown_threshold:.2f}")

            if profit < drawdown_threshold:
                original_lot = adjusted_lot
                adjusted_lot *= 0.7
                logger.warning(f"     -> K·∫æT QU·∫¢: √Åp d·ª•ng gi·∫£m 30%. Lot size: {original_lot:.4f} -> {adjusted_lot:.4f}")
            else:
                logger.info("     -> K·∫æT QU·∫¢: Pass. Kh√¥ng ƒëi·ªÅu ch·ªânh.")
            
            # Correlation Control - Correlation control
            logger.info("   - ** Correlation Control **")
            active_positions = portfolio_exposure.get('active_positions', [])
            symbol_name = proposed_signal.get('symbol', 'UNKNOWN')  # Get from proposed_signal
            
            correlated_symbols = [] # Initialize empty list
            
            # Find correlation group for current symbol
            current_symbol_group = None
            for group_name, group_symbols in correlation_groups.items():
                if symbol_name in group_symbols:
                    current_symbol_group = group_name
                    break
            
            if current_symbol_group:
                logger.info(f"     - Symbol '{symbol_name}' thu·ªôc nh√≥m t∆∞∆°ng quan: {current_symbol_group}")
                correlated_positions = 0
                for position in active_positions:
                    pos_symbol = position.get('symbol')
                    if pos_symbol in correlation_groups.get(current_symbol_group, []):
                        correlated_positions += 1
                        correlated_symbols.append(pos_symbol) # Add symbol to list
                
                logger.info(f"     - S·ªë v·ªã th·∫ø t∆∞∆°ng quan ƒëang active: {correlated_positions} - Symbols: {correlated_symbols}")
                if correlated_positions >= 2:
                    original_lot = adjusted_lot
                    adjusted_lot *= 0.5
                    logger.warning(f"     -> K·∫æT QU·∫¢: √Åp d·ª•ng gi·∫£m 50%. Lot size: {original_lot:.4f} -> {adjusted_lot:.4f}")
                else:
                    logger.info("     -> K·∫æT QU·∫¢: Pass. Kh√¥ng ƒëi·ªÅu ch·ªânh.")
            else:
                logger.info(f"     - Symbol '{symbol_name}' kh√¥ng thu·ªôc nh√≥m t∆∞∆°ng quan n√†o. B·ªè qua ki·ªÉm tra.")

            # Weighted Position Count - Weighted position counting
            logger.info("   - ** Weighted Position Count **")
            num_active = len(portfolio_exposure.get('active_positions', []))
            num_pending = len(portfolio_exposure.get('pending_orders', []))
            effective_positions = num_active + (num_pending * 0.33)
            logger.info(f"     - V·ªã th·∫ø active: {num_active}, Pending: {num_pending} => V·ªã th·∫ø hi·ªáu qu·∫£: {effective_positions:.2f}")
            
            original_lot = adjusted_lot
            if effective_positions >= 3:
                adjusted_lot *= 0.5
                logger.warning(f"     -> K·∫æT QU·∫¢: >= 3 v·ªã th·∫ø hi·ªáu qu·∫£, √°p d·ª•ng gi·∫£m 50%. Lot size: {original_lot:.4f} -> {adjusted_lot:.4f}")
            elif 1 <= effective_positions < 3:
                adjusted_lot *= 0.7
                logger.warning(f"     -> K·∫æT QU·∫¢: 1-3 v·ªã th·∫ø hi·ªáu qu·∫£, √°p d·ª•ng gi·∫£m 30%. Lot size: {original_lot:.4f} -> {adjusted_lot:.4f}")
            else:
                logger.info("     -> K·∫æT QU·∫¢: Pass. Kh√¥ng ƒëi·ªÅu ch·ªânh.")
            
            logger.info(f"üìä Lot size sau ƒëi·ªÅu ch·ªânh portfolio: {adjusted_lot:.4f}")
            
            logger.info(f"üìä Lot size cu·ªëi c√πng tr∆∞·ªõc l∆∞·ª£ng t·ª≠ h√≥a: {adjusted_lot:.4f}")
            
            initial_quantized_lot = self._quantize_and_validate_lot(
                lot_size=adjusted_lot,
                volume_min=symbol_info.get('volume_min'),
                volume_max=symbol_info.get('volume_max'),
                volume_step=symbol_info.get('volume_step')
            )
            
            if initial_quantized_lot is None:
                logger.warning("‚ùå Lot size ban ƒë·∫ßu sau l∆∞·ª£ng t·ª≠ h√≥a kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ HOLD")
                return {'status': 'HOLD'}

            logger.info(f"‚úÖ Lot size ban ƒë·∫ßu (ƒë√£ l∆∞·ª£ng t·ª≠ h√≥a): {initial_quantized_lot}")
            
            # --- NEW: Adaptive Margin Lot Size Search ---
            logger.info("üîÑ B·∫Øt ƒë·∫ßu d√≤ t√¨m Lot Size th√≠ch ·ª©ng v·ªõi Margin")
            
            lot_size_to_margin_map = params.get('lot_size_to_margin_map')
            if not isinstance(lot_size_to_margin_map, dict) or not lot_size_to_margin_map:
                logger.error("CRITICAL: 'lot_size_to_margin_map' kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu.")
                return {'status': 'HOLD', 'correlated_symbols': correlated_symbols}

            current_lot = initial_quantized_lot
            volume_min = symbol_info.get('volume_min', 0.01)
            volume_step = symbol_info.get('volume_step', 0.01)

            while current_lot >= volume_min:
                logger.info(f"   - ƒêang ki·ªÉm tra lot: {current_lot:.2f}...")
                
                # Look up margin from pre-calculated map
                current_lot_str = f"{current_lot:.2f}"
                new_margin = lot_size_to_margin_map.get(current_lot_str)
                
                if new_margin is None:
                    logger.warning(f"   - Kh√¥ng t√¨m th·∫•y margin cho lot size {current_lot_str} trong map. B·ªè qua.")
                    current_lot = round(current_lot - volume_step, 2)
                    continue
                    
                margin_safe, margin_reason = self._check_margin_safety(
                    account_info, 
                    portfolio_exposure, 
                    new_margin, # Pass looked up margin
                    logger
                )
                
                if margin_safe:
                    logger.info(f"‚úÖ T√¨m th·∫•y Lot Size h·ª£p l·ªá v·ªÅ k√Ω qu·ªπ: {current_lot:.2f}")
                    if current_lot < initial_quantized_lot:
                        logger.warning(f"   - Lot size ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh gi·∫£m t·ª´ {initial_quantized_lot} xu·ªëng {current_lot:.2f} do h·∫°n ch·∫ø v·ªÅ k√Ω qu·ªπ.")
                    
                    return {'final_lot_size': current_lot, 'correlated_symbols': correlated_symbols}

                # If not safe, reduce lot size and try again
                current_lot = round(current_lot - volume_step, 2)
            
            # If the loop finishes without finding a suitable lot size
            logger.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y Lot Size n√†o ph√π h·ª£p sau khi d√≤ t√¨m. Lot nh·ªè nh·∫•t ({volume_min}) v·∫´n kh√¥ng ƒë·ªß k√Ω qu·ªπ.")
            return {'status': 'HOLD', 'correlated_symbols': correlated_symbols}
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong t√≠nh to√°n lot size: {str(e)}")
            return {'status': 'HOLD', 'correlated_symbols': []}

    def _calculate_expected_loss_per_lot(self, entry_price, stop_loss, symbol_info, logger):
        """
        Calculate the amount (USD) that will be lost if a 1.0 lot trade hits stop loss.
        
        Returns:
            float: Expected loss amount for 1.0 lot
        """
        try:
            trade_tick_value = float(symbol_info.get('trade_tick_value', 0))
            trade_tick_size = float(symbol_info.get('trade_tick_size', 0))
            
            stop_loss_distance_points = abs(entry_price - stop_loss)
            
            logger.info(f"     - T√≠nh to√°n Loss/Lot: SL distance={stop_loss_distance_points}, Tick value={trade_tick_value}, Tick size={trade_tick_size}")
            
            if trade_tick_size == 0:
                logger.warning("     -> Tick size b·∫±ng 0, kh√¥ng th·ªÉ t√≠nh to√°n.")
                return 0
            
            ticks_in_sl = stop_loss_distance_points / trade_tick_size
            expected_loss_per_lot = ticks_in_sl * trade_tick_value
            
            logger.info(f"     -> Loss/Lot d·ª± ki·∫øn: {expected_loss_per_lot:.2f} USD")
            return expected_loss_per_lot
            
        except Exception as e:
            logger.error(f"     -> L·ªói khi t√≠nh to√°n Loss/Lot: {e}")
            return 0

    def _calculate_max_allowed_lot_by_balance(self, balance: float) -> float:
        """
        Calculate maximum allowed lot size based on account balance.
        - Balance < $500: lot size = balance / 8000 (TIER 1: Very small capital)
        - Balance $500-$2000: lot size = balance / 15000 (TIER 2: Small capital)
        - Balance $2000-$5000: lot size = balance / 20000 (TIER 3: Medium capital)
        - Balance >= $5000: lot size = balance / 25000 (TIER 4: Large capital)
        NOTE: Code is upgrading to 4 tiers => different from prompt => no need to worry
        
        Returns:
            float: Maximum allowed lot size
        """
        if balance < 500:  # TIER 1: Very small capital
            return balance / 8000
        elif balance < 2000:  # TIER 2: Small capital
            return balance / 15000
        elif balance < 5000:  # TIER 3: Medium capital
            return balance / 20000
        else:  # TIER 4: Large capital
            return balance / 25000

    def _quantize_and_validate_lot(self, lot_size, volume_min, volume_max, volume_step):
        """
        Round, quantize and validate final lot size against symbol limits.
        
        Process:
        1. Round lot size to 2 decimal places
        2. Quantize according to symbol's volume_step
        3. Ensure within [volume_min, volume_max] range
        4. Check minimum volume_min
        
        Returns:
            float | None: Final valid lot size or None if too small
        """
        try:
            rounded_lot = round(lot_size, 2)
            quantized_lot = math.floor(rounded_lot / volume_step) * volume_step
            final_valid_lot = max(quantized_lot, volume_min)
            final_valid_lot = min(final_valid_lot, volume_max) # RESTORE
            
            if final_valid_lot < volume_min:
                return None
            
            return round(final_valid_lot, 2)
            
        except Exception as e:
            return None

    def _validate_and_adjust_rr_ratio(self, entry_price, stop_loss, take_profit, signal_type, logger):
        """
        Adjust Risk-to-Reward (R:R) ratio according to new logic.
        
        Logic:
        - R:R = TP distance / SL distance
        - If R:R < 1.0: No adjustment (keep original TP)
        - If R:R > 1.5: Mandatory TP adjustment to R:R = 1.5
        - If 1.0 <= R:R <= 1.5: Keep original TP
        
        Returns:
            float: Final take_profit value (may have been adjusted)
        """
        try:
            sl_distance = abs(entry_price - stop_loss)
            if sl_distance == 0:
                logger.warning("     - Kho·∫£ng c√°ch Stop Loss b·∫±ng 0, kh√¥ng th·ªÉ ƒëi·ªÅu ch·ªânh R:R.")
                return take_profit
            
            tp_distance = abs(entry_price - take_profit)
            current_rr = tp_distance / sl_distance
            
            logger.info(f"     - R:R ban ƒë·∫ßu: {current_rr:.2f} (TP={take_profit}, SL={stop_loss}, Entry={entry_price})")
            logger.info("     - Quy t·∫Øc m·ªõi: R:R < 1.0 kh√¥ng ƒëi·ªÅu ch·ªânh, R:R > 1.5 ƒëi·ªÅu ch·ªânh v·ªÅ 1.5")
            
            is_buy = signal_type.upper() == 'BUY'
            
            new_take_profit = take_profit
            reason = "R:R n·∫±m trong kho·∫£ng cho ph√©p (1.0 <= R:R <= 1.5)."

            if current_rr > 1.5:
                new_tp_distance = sl_distance * 1.5
                new_take_profit = entry_price + new_tp_distance if is_buy else entry_price - new_tp_distance
                reason = f"R:R > 1.5, ƒëi·ªÅu ch·ªânh TP ƒë·ªÉ R:R = 1.5."
            elif current_rr < 1.0:
                # No adjustment when R:R < 1.0
                reason = f"R:R < 1.0, gi·ªØ nguy√™n TP (kh√¥ng ƒëi·ªÅu ch·ªânh)."

            if new_take_profit != take_profit:
                logger.info(f"     -> K·∫æT QU·∫¢: {reason} TP m·ªõi: {new_take_profit}")
            else:
                logger.info(f"     -> K·∫æT QU·∫¢: {reason}")
                
            return new_take_profit
                
        except Exception as e:
            logger.error(f"     -> L·ªói khi ƒëi·ªÅu ch·ªânh R:R: {e}")
            return take_profit

    def _check_margin_safety(self, account_info, portfolio_exposure, new_order_margin_usd, logger):
        """
        Restore margin safety check logic, using standardized calculation method.
        - Free margin > 50% of equity
        - Total margin usage < 40% of equity
        """
        try:
            equity = float(account_info.get('equity', 0))
            if equity == 0:
                return False, "Equity is zero"

            # 1. Get current margin from portfolio (already calculated accurately upstream)
            existing_margin_usd = portfolio_exposure.get('summary', {}).get('total_margin_used_from_portfolio_usd', 0.0)
            
            # 2. NO MORE CALCULATION, USE DIRECTLY
            # new_order_margin_usd has been passed in

            # 3. Calculate and check
            total_margin_usage = existing_margin_usd + new_order_margin_usd
            free_margin_after_trade = equity - total_margin_usage
            
            free_margin_percent = (free_margin_after_trade / equity) * 100
            margin_usage_percent = (total_margin_usage / equity) * 100
            
            logger.info(f"üìä Margin Safety Analysis:")
            logger.info(f"   - Equity: ${equity:.2f}")
            logger.info(f"   - Existing Margin: ${existing_margin_usd:.2f}")
            logger.info(f"   - New Order Margin: ${new_order_margin_usd:.2f}")
            logger.info(f"   - Total Margin Usage (Predicted): ${total_margin_usage:.2f} ({margin_usage_percent:.2f}%)")
            logger.info(f"   - Free Margin (Predicted): ${free_margin_after_trade:.2f} ({free_margin_percent:.2f}%)")
            logger.info(f"   - Rule: Free > 50%, Usage < 40%")
            
            if free_margin_percent <= 50:
                reason = f"Predicted free margin ({free_margin_percent:.2f}%) would be <= 50%"
                logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. {reason}")
                return False, reason
            
            if margin_usage_percent >= 40:
                reason = f"Predicted total margin usage ({margin_usage_percent:.2f}%) would be >= 40%"
                logger.warning(f"   -> ‚ùå K·∫æT QU·∫¢: Th·∫•t b·∫°i. {reason}")
                return False, reason
            
            logger.info("   -> ‚úÖ K·∫æT QU·∫¢: Pass. An to√†n v·ªÅ k√Ω qu·ªπ.")
            return True, "Margin safety rules passed"
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong _check_margin_safety: {str(e)}")
            return False, f"Error in margin safety check: {str(e)}"

    def _build_final_response(self, status, symbol, proposed_signal, **kwargs):
        """
        Package final result into standard dictionary format.
        
        Logic:
        - Create base response with all null values
        - If status = "CONTINUE": Assign actual values from proposed_signal and kwargs
        - If status different: Keep null values, only assign signal = "HOLD"
        
        Returns:
            dict: Final result dictionary with standard format
        """
        # Create base dictionary with null values
        response = {
            "signal": "HOLD" if status in ["HOLD", "SKIP", "STOP_TRADE"] else proposed_signal.get('signal_type'),
            "status": status,
            "lot_size": None,
            "entry_price": None,
            "stop_loss": None,
            "take_profit": None,
            "trailing_stop_loss": proposed_signal.get('trailing_stop_loss'),
            "order_type": None,
            "estimate_win_probability": None,
            "symbol": symbol,
            "estimate_profit": None,
            "estimate_loss": None,
            "technical_reasoning": proposed_signal.get('technical_reasoning'),
            "risk_reward_before": kwargs.get('risk_reward_before'),
            "risk_reward_after": kwargs.get('risk_reward_after'),
            "correlated_symbols": kwargs.get('correlated_symbols'), # Add new field
            "delete_pending_orders": kwargs.get('tickets_to_delete') # Add new field
        }
        
        # If status is CONTINUE, assign values from kwargs
        if status == "CONTINUE":
            response.update({
                "lot_size": kwargs.get('lot_size'),
                "entry_price": proposed_signal.get('entry_price_proposed'),
                "stop_loss": proposed_signal.get('stop_loss_proposed'),
                "take_profit": kwargs.get('take_profit'),
                "order_type": proposed_signal.get('order_type_proposed'),
                "estimate_win_probability": proposed_signal.get('estimate_win_probability'),
                "estimate_profit": kwargs.get('estimate_profit'),
                "estimate_loss": kwargs.get('estimate_loss'),
                "risk_reward_before": kwargs.get('risk_reward_before'),
                "risk_reward_after": kwargs.get('risk_reward_after')
            })
        
        return response
